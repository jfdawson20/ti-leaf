/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ti.msp.descriptortool.USB;

import com.ti.msp.common.StaticInfo;
import com.ti.msp.descriptortool.USB.USBModuleConfiguration;
import com.ti.msp.descriptortool.USBinterfaces.MSCPanelInterfacePanel430;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JTextField;

/**
 *
 * @author a0272979
 */
public class USBModuleConfigurationPanel extends javax.swing.JPanel {
    JEditorPane editorPane;
    USBModuleConfiguration config;

    /**
     * Creates new form USBModuleConfigurationPanel
     */
    public USBModuleConfigurationPanel(JEditorPane editorPane, USBModuleConfiguration config) {
        this.editorPane = editorPane;
        this.config = config;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Configuration Parameters"));

        jCheckBox1.setSelected(config.isSelfPowered());
        jCheckBox1.setText("Self-Powered");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseEntered(evt);
            }
        });
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setSelected(config.isRemoteWakeUp());
        jCheckBox2.setText("Remote Wakeup Supported");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseEntered(evt);
            }
        });
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Max. Power Drain from Host (mA):");

        jLabel2.setText("Configuration String:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100 mA", "98 mA", "96 mA", "94 mA", "92 mA", "90 mA", "88 mA", "86 mA", "84 mA", "82 mA", "80 mA", "78 mA", "76 mA", "74 mA", "72 mA", "70 mA", "68 mA", "66 mA", "64 mA", "62 mA", "60 mA", "58 mA", "56 mA", "54 mA", "52 mA", "50 mA", "48 mA", "46 mA", "44 mA", "42 mA", "40 mA", "38 mA", "36 mA", "34 mA", "32 mA", "30 mA", "28 mA", "26 mA", "24 mA", "22 mA", "20 mA", "18 mA", "16 mA", "14 mA", "12 mA", "10 mA", "8 mA", "6 mA", "4 mA", "2 mA", "0 mA" }));
        jComboBox1.setSelectedIndex(config.getMaxPowerDraw());
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1MouseEntered(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField1.setText(config.getConfigurationString());
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextField1MousePressed(evt);
            }
        });
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jComboBox1, 0, 104, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox1.getAccessibleContext().setAccessibleName("Max Power");
        jTextField1.getAccessibleContext().setAccessibleName("Conf String");
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        StaticInfo.debug("Setting Max Drain Current to: " + jComboBox1.getSelectedItem());
        config.setMaxPowerDraw(jComboBox1.getSelectedIndex());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        boolean state = jCheckBox1.isSelected();
        StaticInfo.debug("Self Powered set to: " + state);
        config.setSelfPowered(state);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        boolean state = jCheckBox2.isSelected();
        StaticInfo.debug("Remote Wake-up set to: " + state);
        config.setRemoteWakeUp(state);
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        String text = jTextField1.getText();
        StaticInfo.debug("Configuration String set to: " + text);
        config.setConfigurationString(text);
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        String text = jTextField1.getText();
        StaticInfo.debug("Configuration String set to: " + text);
        config.setConfigurationString(text);
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jCheckBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jCheckBox1MouseEntered

    private void jCheckBox2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jCheckBox2MouseEntered

    private void jComboBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseEntered
        updateEditorPaneCombo(evt);
    }//GEN-LAST:event_jComboBox1MouseEntered

    private void jTextField1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MousePressed
        updateEditorPaneTextField(evt);
    }//GEN-LAST:event_jTextField1MousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    
    private void updateEditorPane(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JCheckBox source = (JCheckBox) evt.getSource();
        String accessName = source.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Self-Powered")){
            htmlFileToDisplay = "infoPanelText/USBModuleconf/seldPowered.html";
        }else if(accessName.contentEquals("Remote Wakeup Supported")){
            htmlFileToDisplay = "infoPanelText/USBModuleconf/remoteWakeUp.html";
        }else {
            return;
        }
        
        
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }  
    }
    
    private void updateEditorPaneTextField(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JTextField sourcePanel = (JTextField) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Conf String")){
            htmlFileToDisplay = "infoPanelText/USBModuleconf/configString.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        
        
        
        
    }
    
    private void updateEditorPaneCombo(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JComboBox sourcePanel = (JComboBox) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Max Power")){
            htmlFileToDisplay = "infoPanelText/USBModuleconf/maxPower.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
    }
    
}
//Released_Version_5_00_01
