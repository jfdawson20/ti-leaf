#include <stdio.h>
#include <leaf-i2c.h>
#include "sx1502.h"


struct Leaf_I2C_Device sx1502_init(struct Leaf_I2C_Bus *bus, uint8_t address)
{
	
	//create device struct 
	struct Leaf_I2C_Device dev;
	dev.DeviceId = Leaf_I2C_GenerateDevId(b);
	dev.Address  = 	address;
	dev.bus      = bus;

	//return device struct 
	return dev;
}

int16_t sx1502_ReadGPIO(struct Leaf_I2C_Device *dev, uint8_t *data)
{	
	int16_t ret = 0;
	ret = Leaf_I2C_RegRead(dev->bus, data, dev->Addressi, SX_REGDATA);
	return ret;
}

int16_t sx1502_WriteGPIO(struct Leaf_I2C_Device *dev, uint8_t value, uint8_t mask)
{
	int16_t ret = 0;
	ret = Leaf_I2C_RegWrite(dev->bus, value, dev->Address, SX_REGDATA);
	return ret;
}

int16_t sx1502_GetGPIODirection(struct Leaf_I2C_Device *dev, uint8_t *data)
{	
	int16_t ret = 0;
	ret = Leaf_I2C_RegRead(dev->bus, data, dev->Addressi, SX_REGDIR);
	return ret;
}

int16_t sx1502_SetGPIODirection(struct Leaf_I2C_Device *dev, uint8_t setting, uint8_t mask)
{	
	int16_t ret = 0;
	ret = Leaf_I2C_RegWrite(dev->bus, (setting & mask), dev->Address, SX_REGDIR);
	return ret;
}

int16_t sx1502_GetIntMask(struct Leaf_I2C_Device *dev, uint8_t *data)
{	
	int16_t ret = 0;
	ret = Leaf_I2C_RegRead(dev->bus, data, dev->Addressi, SX_REGDIR);
	return ret;
}

int16_t sx1502_SetIntMask(struct Leaf_I2C_Device *dev, uint8_t mask)
{
	
	int16_t ret = 0;
	ret = Leaf_I2C_RegWrite(dev->bus, mask, dev->Address, SX_REGINTMASK);
	return ret;
}

int16_t sx1502_SetEdgeSense(struct Leaf_I2C_Device *dev, uint8_t port, uint8_t setting)
{

	int16_t ret = 0;
	if(port < 4)
		ret = Leaf_I2C_RegWrite(dev->bus, (setting << (port<<1)), dev->Address, SX_REGSENSELOW);
	else
		ret = Leaf_I2C_RegWrite(dev->bus, (setting << (port<<1)), dev->Address, SX_REGSENSEHIGH);
	return ret;
}

int16_t sx1502_GetEdgeSense(struct Leaf_I2C_Device *dev, uint8_t port, uint8_t *data)
{

	int16_t ret = 0;
	if(port < 4)
		ret = Leaf_I2C_RegRead(dev->bus, data, dev->Address, SX_REGSENSELOW);
	else
		ret = Leaf_I2C_RegWrite(dev->bus, data, dev->Address, SX_REGSENSEHIGH);
	return ret;
}

int16_t sx1502_GetInts(struct Leaf_I2C_Device *dev, uint8_t *data)
{

	int16_t ret = 0;
	ret = Leaf_I2C_RegRead(dev->bus, data, dev->Address, SX_REGINTSRC);
	return ret;
}

int16_t sx1502_GetEvents(struct Leaf_I2C_Device *dev, uint8_t *data)
{

	int16_t ret = 0;
	ret = Leaf_I2C_RegRead(dev->bus, data, dev->Address, SX_REGEVENTSTATUS);
	return ret;
}

int16_t sx1502_SetPLD(struct Leaf_I2C_Device *dev, uint8_t value)
{
	int16_t ret = 0;
	ret = Leaf_I2C_RegWrite(dev->bus, value, dev->Address, SX_REGPLDMODE);
	return ret;
}

int16_t sx1502_GetPLD(struct Leaf_I2C_Device *dev, uint8_t *value)
{
	int16_t ret = 0;
	ret = Leaf_I2C_RegRead(dev->bus, value, dev->Address, SX_REGPLDMODE);
	return ret;
}

int16_t sx1502_SetPLDTable(struct Leaf_I2C_Device *dev, uint8_t tableID, uint8_t table)
{

	int16_t ret = 0;
	if(tableID == 0)
		ret = Leaf_I2C_RegWrite(dev->bus, table, dev->Address, SX_REGTABLE0);
		
	else if(tableID == 1):
		ret = Leaf_I2C_RegWrite(dev->bus, table, dev->Address, SX_REGTABLE1);

	else if(tableID == 2):
		ret = Leaf_I2C_RegWrite(dev->bus, table, dev->Address, SX_REGTABLE2);

	else if(tableID == 3):
		ret = Leaf_I2C_RegWrite(dev->bus, table, dev->Address, SX_REGTABLE3);	
	else
		return -1;	

	return ret;
}

int16_t sx1502_GetPLDTable(struct Leaf_I2C_Device *dev, uint8_t tableID, uint8_t *table)
{

	int16_t ret = 0;
	if(tableID == 0)
		ret = Leaf_I2C_RegRead(dev->bus, table, dev->Address, SX_REGTABLE0);
		
	else if(tableID == 1):
		ret = Leaf_I2C_RegRead(dev->bus, table, dev->Address, SX_REGTABLE1);

	else if(tableID == 2):
		ret = Leaf_I2C_RegRead(dev->bus, table, dev->Address, SX_REGTABLE2);

	else if(tableID == 3):
		ret = Leaf_I2C_RegRead(dev->bus, table, dev->Address, SX_REGTABLE3);	
	else
		return -1;	

	return ret;
}

int16_t sx1502_EnableBoost(struct Leaf_I2C_Device *dev)
{

	int16_t ret = 0;
	ret = Leaf_I2C_RegWrite(dev->bus, 0x01 , dev->Address, SX_REGADVANCED);
	return ret;
}

int16_t sx1502_DisableBoost(struct Leaf_I2C_Device *dev)
{

	int16_t ret = 0;
	ret = Leaf_I2C_RegWrite(dev->bus, 0x00, dev->Address, SX_REGADVANCED);
	return ret;
}
/* End oF File*/
